name: Hamburger Build

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Debug
        - Release
        - MinSizeRel
        - RelWithDebInfo

  push:
    paths:
      - '*'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - '*'

env:
  PLUG: Hamburger
  NOSPACE: Hamburger
  BUILDTYPE: ${{inputs.buildType || 'Release'}}


jobs:
  build:
    name: build
    strategy:
      fail-fast: false
      matrix:
        include:
        - {
            name: "Windows 64bit (x86_64)",
            os: windows-latest,
            compiler: "Visual Studio 17 2022",
            folder: "build_windows"
          }
        - {
            name: "Linux (x86_64)",
            os: ubuntu-22.04,
            compiler: "Unix Makefiles",
            folder: "build_linux"
          }
        # - {
        #     name: "Mac Intel (x86_64)",
        #     os: macos-13,
        #     compiler: "Xcode",
        #     folder: "build_mac"
        #   }
        - {
            name: "MacOS (Universal)",
            os: macos-14,
            compiler: "Xcode",
            folder: "build_mac",
          }
    runs-on: ${{ matrix.os }}
    concurrency: build_${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v4
      with:
        node-version: 18

    # thanks to https://forum.juce.com/t/juce-8-linux-issue-with-harfbuzz/61970/3 juce 8 linux builds should work nicely
    - name: (linux) switch to gcc-11
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt install build-essential
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt install g++-11 gcc-11
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
        sudo update-alternatives --set gcc /usr/bin/gcc-11
    
    - name: (linux) install juce dependencies
      if: startsWith(matrix.os, 'ubuntu')
      id: juce_dependencies
      run: | 
        sudo apt-get update
        sudo apt-get install g++ libasound2-dev libjack-jackd2-dev ladspa-sdk libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev

    - name: cache stuff
      id: cache_stuff
      uses: actions/cache@v3
      with:
        path: "${{matrix.folder}}"
        key: "${{matrix.folder}}"
    
    - name: create directories
      id: create_dirs
      run: |
        mkdir "./gh_artifacts/"
        mkdir "./gh_artifacts/Manual Install"

    - name: (mac) select xcode version
      if: startsWith(matrix.os, 'macos')
      id: xcode_version
      run: |
        sudo xcode-select -s '/Applications/Xcode_15.1.app/Contents/Developer'

    - name: (mac) import certificates
      if: startsWith(matrix.os, 'macos')
      id: import_certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        keychain: burger_keychain
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

    - name: (windows) configure
      if: startsWith(matrix.os, 'windows')
      id: configure_windows
      run: |
        cmake -B "${{matrix.folder}}" -G "${{matrix.compiler}}" -T host=x64 -A x64

    - name: (unix  mac / linux) configure
      if: ${{ !startsWith(matrix.os, 'windows') }}
      id: configure
      run: |
        cmake -B "${{matrix.folder}}" -G "${{matrix.compiler}}" -DCMAKE_BUILD_TYPE:STRING=${{env.BUILDTYPE}}

    - name: build
      id: build
      run: |
        cmake --build "${{matrix.folder}}" --config ${{env.BUILDTYPE}} --target ${{env.NOSPACE}}_VST3 -j
        cmake --build "${{matrix.folder}}" --config ${{env.BUILDTYPE}} --target ${{env.NOSPACE}}_CLAP -j

    - name: (mac) build
      if: startsWith(matrix.os, 'macos')
      id: build_mac
      run: |
        cmake --build "${{matrix.folder}}" --config ${{env.BUILDTYPE}} --target ${{env.NOSPACE}}_AU -j

    - name: (windows) package
      if: startsWith(matrix.os, 'windows')
      id: package_windows
      run: |
        mv "${{matrix.folder}}/${{env.PLUG}}.vst3/Contents/x86_64-win/${{env.PLUG}}.vst3" "${{env.PLUG}}.vst3"
        rm -r "${{matrix.folder}}/${{env.PLUG}}.vst3"
        mv "${{env.PLUG}}.vst3" "${{matrix.folder}}/${{env.PLUG}}.vst3"
        mv -Force "${{matrix.folder}}/${{env.NOSPACE}}_artefacts/${{env.BUILDTYPE}}/CLAP/${{env.PLUG}}.clap" "${{matrix.folder}}/${{env.PLUG}}.clap"
        cp "${{matrix.folder}}/${{env.PLUG}}.clap" "gh_artifacts/Manual Install/${{env.PLUG}}.clap"
        cp "${{matrix.folder}}/${{env.PLUG}}.vst3" "gh_artifacts/Manual Install/${{env.PLUG}}.vst3"

    - name: (linux) package
      if: startsWith(matrix.os, 'ubuntu')
      id: package_linux
      run: |
        pwd
        mv "./${{matrix.folder}}/${{env.PLUG}}.vst3" "./gh_artifacts/Manual Install/${{env.PLUG}}.vst3"
        mv "./${{matrix.folder}}/${{env.NOSPACE}}_artefacts/${{env.BUILDTYPE}}/CLAP/${{env.PLUG}}.clap" "./gh_artifacts/Manual Install/${{env.PLUG}}.clap"

    - name: (mac) package
      if: startsWith(matrix.os, 'macos')
      id: package_mac
      run: |
        mv "${{matrix.folder}}/${{env.NOSPACE}}_artefacts/${{env.BUILDTYPE}}/CLAP/${{env.PLUG}}.clap" "${{matrix.folder}}/${{env.PLUG}}.clap"

    - name: (mac) code signing
      if: startsWith(matrix.os, 'macos')
      id: code_signing
      run: |
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "${{ matrix.folder }}/${{ env.PLUG }}.vst3" --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "${{ matrix.folder }}/${{ env.PLUG }}.clap" --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" -v "${{ matrix.folder }}/${{ env.PLUG }}.component" --deep --strict --options=runtime --timestamp
        zip -r "${{ matrix.folder }}/${{ env.PLUG }}_vst3.zip" "${{ matrix.folder }}/${{ env.PLUG }}.vst3"
        zip -r "${{ matrix.folder }}/${{ env.PLUG }}_clap.zip" "${{ matrix.folder }}/${{ env.PLUG }}.clap"
        zip -r "${{ matrix.folder }}/${{ env.PLUG }}_au.zip" "${{ matrix.folder }}/${{ env.PLUG }}.component"
        rm -r "${{ matrix.folder }}/${{ env.PLUG }}.vst3"
        rm -r "${{ matrix.folder }}/${{ env.PLUG }}.clap"
        rm -r "${{ matrix.folder }}/${{ env.PLUG }}.component"
        xcrun notarytool submit "${{ matrix.folder }}/${{ env.PLUG }}_vst3.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun notarytool submit "${{ matrix.folder }}/${{ env.PLUG }}_clap.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun notarytool submit "${{ matrix.folder }}/${{ env.PLUG }}_au.zip" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        unzip "${{ matrix.folder }}/${{ env.PLUG }}_vst3.zip"
        unzip "${{ matrix.folder }}/${{ env.PLUG }}_clap.zip"
        unzip "${{ matrix.folder }}/${{ env.PLUG }}_au.zip"
        rm "${{ matrix.folder }}/${{ env.PLUG }}_vst3.zip"
        rm "${{ matrix.folder }}/${{ env.PLUG }}_clap.zip"
        rm "${{ matrix.folder }}/${{ env.PLUG }}_au.zip"
        xcrun stapler staple "${{ matrix.folder }}/${{ env.PLUG }}.vst3"
        xcrun stapler staple "${{ matrix.folder }}/${{ env.PLUG }}.clap"
        xcrun stapler staple "${{ matrix.folder }}/${{ env.PLUG }}.component"

    # - name: (mac) auval
    #   if: startsWith(matrix.os, 'macos')
    #   id: auval
    #   run: |
    #     sudo cp -R -f "setup/${{ matrix.folder }}/paid/${{ env.PLUG }}.component" "/Library/Audio/Plug-Ins/Components/${{ env.PLUG }}.component"
    #     killall -9 AudioComponentRegistrar
    #     auval -a
    #     auval -strict -v aufx Prsm Ured

    - name: (windows) build installer
      if: startsWith(matrix.os, 'windows')
      id: installer_windows
      run: |
        cd setup
        iscc "innosetup.iss" "/DPluginName=${{env.PLUG}}"
        mv "Output/${{env.PLUG}} Installer.exe" "../gh_artifacts/"

    - name: (mac) import installer certificates
      if: startsWith(matrix.os, 'macos')
      id: import_installer_certificates
      uses: apple-actions/import-codesign-certs@v2
      with:
        keychain: burger_keychain
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
        p12-file-base64: ${{ secrets.DEV_ID_INSTALL_CERT }}
        p12-password: ${{ secrets.DEV_ID_INSTALL_PASSWORD }}
        create-keychain: false

    - name: (mac) build installer
      if: startsWith(matrix.os, 'macos')
      id: installer_mac
      run: |
        cd setup
        chmod +rx "./assets/scripts/postinstall"
        cd ../
        pkgbuild --install-location "/Library/Audio/Plug-Ins/VST3/AviaryAudio" --identifier "com.aviaryaudio.${{env.NOSPACE}}-vst3.pkg" --version 1.1.1 --component "${{matrix.folder}}/${{env.PLUG}}.vst3" "${{env.NOSPACE}}-vst3.pkg"
        pkgbuild --install-location "/Library/Audio/Plug-Ins/CLAP/AviaryAudio" --identifier "com.aviaryaudio.${{env.NOSPACE}}-clap.pkg" --version 1.1.1 --component "${{matrix.folder}}/${{env.PLUG}}.clap" "${{env.NOSPACE}}-clap.pkg"
        pkgbuild --install-location "/Library/Audio/Plug-Ins/Components" --identifier "com.aviaryaudio.${{env.NOSPACE}}-au.pkg" --scripts "./setup/assets/scripts" --version 1.1.1 --component "${{matrix.folder}}/${{env.PLUG}}.component" "${{env.NOSPACE}}-au.pkg"
        python3 ./setup/productbuild.py --pluginname "${{env.PLUG}}"
        productbuild --timestamp --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" --distribution "./${{env.PLUG}}.xml" --resources "./setup/assets/" "${{env.PLUG}} Installer.pkg"
        xcrun notarytool submit "${{env.PLUG}} Installer.pkg" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun stapler staple "${{env.PLUG}} Installer.pkg"
        mkdir -p "./gh_artifacts/Manual Install"
        mv "${{matrix.folder}}/${{env.PLUG}}.component" "./gh_artifacts/Manual Install/"
        mv "${{matrix.folder}}/${{env.PLUG}}.vst3" "./gh_artifacts/Manual Install/"
        mv "${{matrix.folder}}/${{env.PLUG}}.clap" "./gh_artifacts/Manual Install/"
        mv "${{env.PLUG}} Installer.pkg" "./gh_artifacts"
    
    - uses: actions/upload-artifact@v4
      with:
        name: ${{env.PLUG}} ${{ matrix.name }}
        path: "./gh_artifacts"
        
